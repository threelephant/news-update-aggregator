version: '3.8'

networks:
  mynetwork:
    driver: bridge

services:
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  postgres:
    image: "postgres:13"
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - mynetwork

  redis:
    image: redis:latest
    restart: always
    volumes:
      - ./redis/data:/data
    command: [ "redis-server", "--save 60 1",  "--loglevel warning" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - mynetwork

  manager-service:
    build:
      context: ./Manager Service
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - ACCESSOR_SERVICE_URL=http://accessor-service:5005
    networks:
      - mynetwork

  accessor-service:
    build:
      context: ./Accessor Service
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/dbname
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    networks:
      - mynetwork

  news-frontend:
    build: ./news-frontend
    ports:
      - "3000:3000"
    networks:
      - mynetwork
